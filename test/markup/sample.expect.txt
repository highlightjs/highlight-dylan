<span class="hljs-keyword">define</span> <span class="hljs-keyword">class</span> <span class="hljs-class">&lt;vehicle&gt;</span> (<span class="hljs-class">&lt;object&gt;</span>)
  slot owner :: <span class="hljs-class">&lt;string&gt;</span>,
    <span class="hljs-symbol">init-keyword:</span> <span class="hljs-symbol">owner:</span>,
    <span class="hljs-symbol">init-value:</span> <span class="hljs-string">&quot;Northern Motors&quot;</span>;
<span class="hljs-keyword">end</span> <span class="hljs-keyword">class</span> <span class="hljs-class">&lt;vehicle&gt;</span>;

<span class="hljs-keyword">define</span> <span class="hljs-keyword">class</span> <span class="hljs-class">&lt;car&gt;</span> (<span class="hljs-class">&lt;vehicle&gt;</span>)
<span class="hljs-keyword">end</span> <span class="hljs-keyword">class</span> <span class="hljs-class">&lt;car&gt;</span>;

<span class="hljs-keyword">define</span> <span class="hljs-keyword">class</span> <span class="hljs-class">&lt;truck&gt;</span> (<span class="hljs-class">&lt;vehicle&gt;</span>)
  slot capacity,
    <span class="hljs-symbol">required-init-keyword:</span> <span class="hljs-symbol">tons:</span>;
<span class="hljs-keyword">end</span> <span class="hljs-keyword">class</span> <span class="hljs-class">&lt;truck&gt;</span>;

<span class="hljs-keyword">define</span> <span class="hljs-keyword">method</span> add (x :: <span class="hljs-class">&lt;integer&gt;</span>, y :: <span class="hljs-class">&lt;integer&gt;</span>) 
  =&gt; ( sum :: <span class="hljs-class">&lt;integer&gt;</span>)
 x + y
<span class="hljs-keyword">end</span> <span class="hljs-keyword">method</span> add;

<span class="hljs-keyword">define</span> function check()
  <span class="hljs-keyword">let</span> truck = make(<span class="hljs-class">&lt;truck&gt;</span>, <span class="hljs-symbol">tons:</span> <span class="hljs-number">25</span>);
  format-out(<span class="hljs-string">&quot;%s&#x27;s truck can carry %d\n&quot;</span>, 
             truck.owner,
             truck.capacity);
<span class="hljs-keyword">end</span>;

<span class="hljs-keyword">define</span> generic tax
    (v :: <span class="hljs-class">&lt;vehicle&gt;</span>) =&gt; (tax-in-dollars :: <span class="hljs-class">&lt;float&gt;</span>);

<span class="hljs-keyword">define</span> <span class="hljs-keyword">method</span> tax
    (v :: <span class="hljs-class">&lt;vehicle&gt;</span>) =&gt; (tax-in-dollars :: <span class="hljs-class">&lt;float&gt;</span>)
  <span class="hljs-number">100.00</span>
<span class="hljs-keyword">end</span>;

<span class="hljs-keyword">define</span> <span class="hljs-keyword">method</span> tax
    (c :: <span class="hljs-class">&lt;car&gt;</span>) =&gt; (tax-in-dollars :: <span class="hljs-class">&lt;float&gt;</span>)
  <span class="hljs-number">50.0</span>;
<span class="hljs-keyword">end</span> <span class="hljs-keyword">method</span>;

<span class="hljs-keyword">define</span> <span class="hljs-keyword">method</span> tax
    (t :: <span class="hljs-class">&lt;truck&gt;</span>) =&gt; (tax-in-dollars :: <span class="hljs-class">&lt;float&gt;</span>)
  <span class="hljs-comment">// standard vehicle tax plus $10/ton</span>
  next-method() + t.capacity * <span class="hljs-number">10.0</span>;
<span class="hljs-keyword">end</span> <span class="hljs-keyword">method</span>;

<span class="hljs-keyword">define</span> function make-fibonacci()
  <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">let</span> m = <span class="hljs-number">1</span>;
  <span class="hljs-keyword">method</span> ()
    <span class="hljs-keyword">let</span> result = n + m;
    n := m;
    m := result  <span class="hljs-comment">// return value</span>
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>;

<span class="hljs-keyword">define</span> <span class="hljs-keyword">constant</span> fib = make-fibonacci();

<span class="hljs-keyword">for</span> (i from <span class="hljs-number">1</span> to <span class="hljs-number">15</span>)
  format-out(<span class="hljs-string">&quot;%d &quot;</span>, fib())
<span class="hljs-keyword">end</span>;
